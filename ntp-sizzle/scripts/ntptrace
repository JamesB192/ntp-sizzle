#! /usr/bin/env python
# -*- coding: utf-8 -*-
"""
ntptrace - trace peers of an NTP server

Usage: ntptrace [-n | --numeric] [-m number | --max-hosts=number]
                [-r hostname | --host=hostname] [--help | --more-help]
                [-V | --version]
                hostname

See the manual page for details.
"""

# Copyright the NTPsec project contributors
#
# SPDX-License-Identifier: BSD-2-Clause

from __future__ import print_function

import getopt
import re
import subprocess
import sys

try:
    import ntp.util
except ImportError as e:
    sys.stderr.write("ntptrace: can't find Python NTP library.\n")
    sys.stderr.write("%s\n" % e)
    sys.exit(1)


def get_info(host):
    info = ntp_read_vars(0, [], host)
    if info is None or "stratum" not in info:
        return None

    info["offset"] = round(float(info["offset"]) / 1000, 6)
    info["syncdistance"] = (
        float(info["rootdisp"]) + (float(info["rootdelay"]) / 2)
    ) / 1000

    return info


def get_next_host(peer, host):
    info = ntp_read_vars(peer, ["srcadr"], host)
    if info is None:
        return None
    return info["srcadr"]


def ntp_read_vars(peer, variables, host):
    obsolete = {"phase": "offset", "rootdispersion": "rootdisp"}

    do_all = bool(not variables)
    outvars = {}.fromkeys(variables)

    if do_all:
        outvars["status_line"] = {}

    cmd = ["ntpq", "-n", "-c", "rv %s %s" % (peer, ",".join(variables))]
    if host is not None:
        cmd.append(host)

    try:
        # sadly subprocess.check_output() is not in Python 2.6
        proc = subprocess.Popen(
            cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT
        )
        out = proc.communicate()[0]
        output = out.decode("utf-8").splitlines()
    except subprocess.CalledProcessError as error:
        print(
            "Could not start ntpq: %s" % error.output, file=sys.stderr
        )
        raise SystemExit(1)
    except OSError as error:
        print(
            "Could not start ntpq: %s" % error.strerror, file=sys.stderr
        )
        raise SystemExit(1)

    for line in output:
        if re.search(r"Connection refused", line):
            return None

        match = re.search(
            r"^asso?c?id=0 status=(\S{4}) (\S+), (\S+),",
            line,
            flags=re.IGNORECASE,
        )
        if match:
            outvars["status_line"]["status"] = match.group(1)
            outvars["status_line"]["leap"] = match.group(2)
            outvars["status_line"]["sync"] = match.group(3)

        iterator = re.finditer(r"(\w+)=([^,]+),?\s?", line)
        for match in iterator:
            key = match.group(1)
            val = match.group(2)
            val = re.sub(r'^"([^"]+)"$', r"\1", val)
            key = obsolete.get(key, key)
            if do_all or key in outvars:
                outvars[key] = val

    return outvars


USAGE = (
    r"""ntptrace - trace peers of an NTP server
USAGE: ntptrace [-<flag> [<val>] | --<name>[{=| }<val>]]... [host]

    -n, --numeric                Print IP addresses instead of hostnames
    -m, --max-hosts=num          Maximum number of peers to trace
    -r, --host=str               Single remote host
    -?, --help                   Display usage information and exit
        --more-help              Pass the extended usage text through a pager
    -V, --version                Output version information and exit

Options are specified by doubled hyphens and their name or by a single
hyphen and the flag character."""
    + "\n"
)

BIN_VER = "2024.04.22"
ntp.util.stdversioncheck(BIN_VER)

try:
    (options, arguments) = getopt.getopt(
        sys.argv[1:],
        "m:nr:?V",
        [
            "help",
            "host=",
            "max-hosts=",
            "more-help",
            "numeric",
            "version",
        ],
    )
except getopt.GetoptError as error:
    sys.stderr.write(str(error) + "\n")
    raise SystemExit(1)

NUMERIC = False
MAX_HOSTS = 99
HOST = "127.0.0.1"

for switch, val in options:
    if switch in ["-m", "--max-hosts"]:
        ERROR_MESSAGE = "Error: -m parameter '%s' not a number\n"
        MAX_HOSTS = ntp.util.safeargcast(val, int, ERROR_MESSAGE, USAGE)
    elif switch in ["-n", "--numeric"]:
        NUMERIC = True
    elif switch in ["-r", "--host"]:
        HOST = val
    elif switch in ["-?", "--help", "--more-help"]:
        print(USAGE, file=sys.stderr)
        raise SystemExit(0)
    elif switch in ["-V", "--version"]:
        print("ntptrace %s" % ntp.util.stdversion())
        raise SystemExit(0)

if arguments:
    HOST = arguments[0]

HOST_COUNT = 0

while True:
    HOST_COUNT += 1

    info = get_info(HOST)

    if info is None:
        break

    if not NUMERIC:
        HOST = ntp.util.canonicalize_dns(HOST)

    print(
        "%s: stratum %d, offset %f, synch distance %f"
        % (
            HOST,
            int(info["stratum"]),
            info["offset"],
            info["syncdistance"],
        ),
        end="",
    )
    if int(info["stratum"]) == 1:
        print(", refid '%s'" % info["refid"], end="")
    print()

    if (
        int(info["stratum"]) == 0
        or int(info["stratum"]) == 1
        or int(info["stratum"]) == 16
    ):
        break

    if re.search(r"^127\.127\.\d{1,3}\.\d{1,3}$", info["refid"]):
        break

    if HOST_COUNT == MAX_HOSTS:
        break

    next_host = get_next_host(info["peer"], HOST)

    if next_host is None:
        break
    if re.search(r"^127\.127\.\d{1,3}\.\d{1,3}$", next_host):
        break

    HOST = next_host
